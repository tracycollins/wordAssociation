{"version":3,"sources":["User.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","grid","display","gridItem","margin","card","raised","maxWidth","profileImage","height","bannerImage","table","tableRowGreen","backgroundColor","appBar","menuButton","marginRight","spacing","title","search","position","borderRadius","shape","marginLeft","width","breakpoints","up","searchIcon","padding","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","buttonAll","buttonLeft","buttonNeutral","buttonRight","buttonMismatch","left","neutral","right","none","formatDate","dateInput","Date","toLocaleDateString","year","month","day","User","props","classes","createdAt","user","lastSeen","lastSeenDuration","Duration","toString","twitterAge","twitterAgeString","tweetRate","days","Math","ceil","statusesCount","useState","userSearch","setUserSearch","hotKey","setHotKey","handleHotKey","event","key","toUpperCase","handleUserChange","useHotkeys","className","Container","component","AppBar","Toolbar","Button","variant","onClick","name","stats","mismatched","ButtonGroup","size","aria-label","uncategorized","all","InputBase","placeholder","input","inputProps","value","onKeyPress","charCode","console","log","handleSearchUser","onChange","target","Typography","Grid","item","xs","Card","CardHeader","window","open","screenName","subheader","CardMedia","image","profileImageUrl","bannerImageUrl","CardContent","description","dataSource","sourceType","options","TableContainer","Table","TableBody","TableRow","TableCell","align","location","followersCount","friendsCount","mentions","rate","toFixed","FormGroup","category","getCategoryClass","categoryAuto","FormControl","RadioGroup","FormControlLabel","labelPlacement","control","Radio","label","Checkbox","checked","categoryVerified","following","ignored","isBot","statsObj","socket","socketClient","App","nodesPerMin","maxNodesPerMin","bestNetworkId","status","setStatus","nodeId","tweets","age","rateMax","tweetsPerDay","categoryVerfied","currentUser","setUser","text","currentHashtag","setHashtag","handleAction","useCallback","action","type","data","useEffect","on","results","debug","node","id","emit","namespace","userId","password","socketId","serverConnected","userReadyTransmitted","userReadyAck","disconnect","undefined","persist","eventName","currentTarget","code","searchFilter","searchString","searchTerm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dabf364.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { Timeline } from 'react-twitter-widgets'\n\nimport Duration from 'duration';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Card from '@material-ui/core/Card';\n// import CardActionArea from '@material-ui/core/CardActionArea';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\n// import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\n// import FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\n// import IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\n// import MenuIcon from '@material-ui/icons/Menu';\n// import Paper from '@material-ui/core/Paper';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\n// import TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import { fade, makeStyles } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  // root: {\n  //   maxWidth: 400,\n  // },\n  root: {\n    flexGrow: 2,\n  },\n  grid: {\n    display: 'flex',\n    // flexDirection: 'row',\n    // flexGrow: 2,\n    // flexFlow: 'wrap',\n    // alignItems: 'center',\n    // alignItems: 'stretch',\n    // margin: 'auto',\n  },  \n  gridItem: {\n    // backgroundColor: 'lightgray',\n    margin: 5,\n    // padding: 2,\n    // backgroundColor: 'red',\n  },  \n  // paper: {\n  //   alignItems: 'left',\n  // },\n  card: {\n    raised: false,\n    // border: 10,\n    // backgroundColor: 'lightgray',\n    maxWidth: 300,\n  },\n  profileImage: {\n    // width: 200,\n    height: 300,\n    // margin: 8,\n    // padding: -10,\n  },\n  bannerImage: {\n    // width: 200,\n    height: 80,\n    // margin: 8,\n    // padding: 10,\n  },\n  table: {\n    // width: 300,\n  },\n  tableRowGreen: {\n    backgroundColor: 'lightgreen',\n    // width: 300,\n  },\n  appBar: {\n    backgroundColor: 'white',\n    margin: 2,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    // backgroundColor: fade(theme.palette.common.black, 0.15),\n    backgroundColor: \"white\",\n    '&:hover': {\n      // backgroundColor: fade(theme.palette.common.black, 0.15),\n      backgroundColor: \"lightgray\",\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'primary',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n\n  buttonAll: {\n    color: 'black',\n  },\n  buttonLeft: {\n    color: 'blue',\n  },\n  buttonNeutral: {\n    color: 'gray',\n  },\n  buttonRight: {\n    color: 'red',\n  },\n  buttonMismatch: {\n    // color: 'black',\n    margin: 5\n  },\n\n  left: {\n    // padding: 5,\n    color: 'white',\n    backgroundColor: 'blue',\n  },\n  neutral: {\n    // margin: 5,\n    // padding: 5,\n    color: 'white',\n    backgroundColor: 'gray',\n  },\n  right: {\n    // margin: 5,\n    // padding: 5,\n    color: 'white',\n    backgroundColor: 'red',\n  },\n  none: {\n    // margin: 5,\n    // padding: 5,\n    color: 'black',\n    backgroundColor: 'white',\n  },\n\n}));\n\nconst formatDate = (dateInput) => {\n  return new Date(dateInput).toLocaleDateString(\n    'en-gb',\n    {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }\n  );\n}\n\nconst defaultProfileImage = \"logo192.png\"\nconst defaultBannerImage = \"logo192.png\"\n\nconst User = (props) => {\n\n  const classes = useStyles();\n\n  const createdAt = formatDate(props.user.createdAt)\n  const lastSeen = formatDate(props.user.lastSeen)\n \n  const lastSeenDuration = new Duration(new Date(props.user.lastSeen)).toString(1, 4)\n  const twitterAge = props.user.createdAt ? new Duration(new Date(props.user.createdAt)) : new Duration(new Date())\n  const twitterAgeString = twitterAge.toString(1, 4)\n\n  const tweetRate = twitterAge.days > 0 ? Math.ceil(props.user.statusesCount/twitterAge.days) : 0;\n\n  const [userSearch, setUserSearch] = useState(\"\");\n  const [hotKey, setHotKey] = useState(\"---\");\n\n  const handleHotKey = (event) => {\n    setHotKey(event.key.toUpperCase())\n    props.handleUserChange(event)\n  }\n\n  useHotkeys('L', (event) => handleHotKey(event))\n  useHotkeys('R', (event) => handleHotKey(event))\n  useHotkeys('N', (event) => handleHotKey(event))\n\n  const handleChangeSearch = (event) => {\n    console.log(\"handleChangeSearch: \" + event.target.value)\n    setUserSearch(event.target.value);\n  }\n\n  const handleKeyPress = (event) => {\n    if (event.charCode === 13) { // enter key pressed\n      console.log(\"ENTER\")\n      props.handleSearchUser(userSearch)\n    }\n  }\n\n  const openUserTwitterPage = () => {\n    console.log(\"open twitter\")\n    window.open(`http://twitter.com/${props.user.screenName || null}`, \"_blank\") //to open new page\n  }\n\n  const getCategoryClass = (category) => {\n    switch (category){\n      case \"left\":\n      case \"neutral\":\n      case \"right\":\n        return classes[category]\n      default:\n        return classes.none\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Container component=\"main\">\n        <AppBar  className={classes.appBar} position=\"static\">\n          <Toolbar>\n            <Button \n              variant=\"contained\" color=\"primary\" onClick={props.handleUserChange} name=\"mismatch\" className={classes.buttonMismatch}>MISMATCH {props.stats.user.mismatched}\n            </Button>\n            <ButtonGroup variant=\"contained\" color=\"primary\" size=\"small\" aria-label=\"small button group\">\n              <Button onClick={props.handleUserChange} name=\"all\" >TOTAL: {props.stats.user.uncategorized.all}</Button>\n              <Button onClick={props.handleUserChange} name=\"left\" >LEFT: {props.stats.user.uncategorized.left}</Button>\n              <Button onClick={props.handleUserChange} name=\"neutral\" >NEUTRAL: {props.stats.user.uncategorized.neutral}</Button>\n              <Button onClick={props.handleUserChange} name=\"right\" >RIGHT: {props.stats.user.uncategorized.right}</Button>\n          </ButtonGroup>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon color=\"primary\"/>\n              </div>\n              <InputBase\n                placeholder=\"search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n                value={userSearch}\n                onKeyPress={handleKeyPress}\n                onChange={handleChangeSearch}\n              />\n            </div>\n            <Typography color=\"primary\">\n              HOTKEY: {hotKey}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid className={classes.grid}>\n          <Grid item className={classes.gridItem} xs={3}>\n            <Card className={classes.card} variant=\"outlined\">\n              <CardHeader\n                onClick={openUserTwitterPage}\n                title={`${props.user.name}`}\n                subheader={`@${props.user.screenName}`}\n              >\n              </CardHeader>\n              <CardMedia\n                className={classes.profileImage}\n                image={props.user.profileImageUrl || defaultProfileImage}\n              />\n              <br></br>\n              <CardMedia className={classes.bannerImage} image={props.user.bannerImageUrl || defaultBannerImage} />\n              <CardContent>\n                <Typography>\n                  {props.user.description}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item className={classes.gridItem} xs={4}>\n            <Timeline\n              dataSource={{\n                sourceType: 'profile',\n                screenName: props.user.screenName\n              }}\n              options={{\n                height: '540'\n              }}\n            />\n          </Grid>\n          <Grid item className={classes.gridItem} xs={3}>\n            <TableContainer>\n              <Table className={classes.table} size=\"small\">\n                <TableBody>\n                  <TableRow>\n                    <TableCell>location</TableCell><TableCell align=\"right\">{props.user.location}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>created</TableCell><TableCell align=\"right\">{createdAt}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>twitter age</TableCell><TableCell align=\"right\">{twitterAgeString}</TableCell>\n                  </TableRow>\n                  <TableRow className={props.user.followersCount > 5000 ? classes.tableRowGreen : null}>\n                    <TableCell>followers</TableCell><TableCell align=\"right\">{props.user.followersCount}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>friends</TableCell><TableCell align=\"right\">{props.user.friendsCount}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>tweets</TableCell><TableCell align=\"right\">{props.user.statusesCount}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>tweets/day</TableCell><TableCell align=\"right\">{tweetRate}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>last seen</TableCell><TableCell align=\"right\">{lastSeen}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>last seen</TableCell><TableCell align=\"right\">{lastSeenDuration} ago</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>mentions</TableCell><TableCell align=\"right\">{props.user.mentions}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>mentions/min</TableCell><TableCell align=\"right\">{props.user.rate ? props.user.rate.toFixed(1) : 0}</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item className={classes.gridItem} xs={1}>\n            <FormGroup>\n              <Button className={getCategoryClass(props.user.categoryAuto)}>\n                AUTO: {props.user.categoryAuto.toUpperCase() || \"NONE\"}\n              </Button>\n\n              <FormControl component=\"fieldset\">\n                <RadioGroup aria-label=\"category\" name=\"category\" value={props.user.category || \"none\"} onChange={props.handleUserChange}>\n                  <FormControlLabel labelPlacement=\"start\" value=\"left\" control={<Radio />} label=\"left\"/>\n                  <FormControlLabel labelPlacement=\"start\" value=\"neutral\" control={<Radio />} label=\"neutral\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"right\" control={<Radio />} label=\"right\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"positive\" control={<Radio />} label=\"positive\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"negative\" control={<Radio />} label=\"negative\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"none\" control={<Radio />} label=\"none\" />\n                </RadioGroup>\n              </FormControl>\n\n              <FormControlLabel\n                control={<Checkbox checked={props.user.categoryVerified || false} onChange={props.handleUserChange} name=\"catVerified\" />}\n                label=\"verified\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={props.user.following || false} onChange={props.handleUserChange} name=\"following\" />}\n                label=\"following\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={props.user.ignored || false} onChange={props.handleUserChange} name=\"ignored\" />}\n                label=\"ignored\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={props.user.isBot || false} onChange={props.handleUserChange} name=\"isBot\" />}\n                label=\"bot\"\n                labelPlacement=\"start\"\n              />\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default User;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport socketClient from \"socket.io-client\";\nimport './App.css';\nimport User from './User.js';\n\n// const ENDPOINT = \"http://mbp3:9997/view\";\nconst ENDPOINT = \"https://word.threeceelabs.com/view\";\n\nconst statsObj = {};\nstatsObj.viewerReadyTransmitted = false;\n\nconst socket = socketClient(ENDPOINT);\n\nconst App = () => {\n\n  const defaultStatus = {\n    nodesPerMin: 0, \n    maxNodesPerMin: 0,\n    bestNetworkId: \"\",\n    user: {\n      uncategorized: {\n        left: 0,\n        neutral: 0,\n        right: 0,\n        all: 0,\n        mismatched: 0\n      }\n    }\n  }\n\n  const defaultUser = {\n\n    nodeId: null, \n    screenName: \"threecee\",\n    name: \"\",\n    location: \"\",\n    description: \"\",\n    profileImageUrl: \"https://pbs.twimg.com/profile_images/1205585278565527559/GrTkBpzl.jpg\",\n    bannerImage: \"\",\n    createdAt: null,\n    followersCount: 0,\n    friendsCount: 0,\n    tweets: 0,\n\n    age: 0,\n    mentions: 0,\n    rate: 0,\n    rateMax: 0,\n    tweetsPerDay: 0,\n\n    lastSeen: null,\n    isBot: false,\n    following: false,\n    categoryVerfied: false,\n    category: \"none\",\n    categoryAuto: \"none\",\n  }\n\n  const defaultHashtag = {\n    nodeId: null,\n    text: null,\n    categoryAuto: \"none\",\n    category: \"none\",\n    \n    lastSeen: null,\n    age: 0,\n    mentions: 0,\n    rate: 0,\n    rateMax: 0,\n  }\n\n  const [status, setStatus] = useState(defaultStatus);\n  const [currentUser, setUser] = useState(defaultUser);\n  const [currentHashtag, setHashtag] = useState(defaultHashtag);\n\n  const handleAction = useCallback((action) => {\n    switch (action.type){\n      case \"user\":\n          setUser({\n            ...currentUser,\n            ...action.data,\n          })\n          console.log(\"USER: @\" + currentUser.screenName + \" | \" + currentUser.profileImageUrl)\n        break\n      case \"hashtag\":\n          setHashtag({})\n          console.log(\"HT: #\" + currentHashtag.text)\n        break\n      case \"stats\":\n          setStatus({\n            ...status,\n            ...action.data,\n          })\n        break\n        default:\n    }\n  }, [currentHashtag.text, currentUser])\n  \n  const handleSearchUser = (searchString) => {\n    const searchTerm = \"@\" + searchString\n    socket.emit(\"TWITTER_SEARCH_NODE\", searchTerm)\n  }\n\n  const handleUserChange = (event) => {\n\n    console.log(typeof event)\n\n    if (event.persist !== undefined) { event.persist() }\n\n    let eventName = event.currentTarget.name;\n\n    if (event.currentTarget.name === undefined && event.code){\n      switch (event.code){\n        case \"KeyL\":\n          eventName = \"left\"\n          break;\n        case \"KeyN\":\n          eventName = \"neutral\"\n          break;\n        case \"KeyR\":\n          eventName = \"right\"\n          break;\n        default:\n      }\n    }\n\n    console.log(\"handleUserChange: name: \" + eventName + \" | value: \" + event.currentTarget.value)\n\n    let searchFilter = \"@?\";\n\n    switch (eventName){\n      case \"all\":\n      case \"left\":\n      case \"neutral\":\n      case \"right\":\n        searchFilter += eventName\n        socket.emit(\"TWITTER_SEARCH_NODE\", searchFilter);\n        break\n      case \"mismatch\":\n        socket.emit(\"TWITTER_SEARCH_NODE\", \"@?mm\");\n        break\n      case \"category\":\n        console.log(\"handleUserChange: \" + eventName + \" | \" + event.currentTarget.value + \" | \" + event.currentTarget.checked)\n        socket.emit(\"TWITTER_CATEGORIZE_NODE\", {\n          category: event.currentTarget.value,\n          following: true,\n          node: currentUser,\n        });\n        break\n      case \"isBot\":\n        console.log(\"handleUserChange: \" + eventName + \" | \" + event.currentTarget.checked)\n        if (event.currentTarget.checked){\n          socket.emit(\"TWITTER_BOT\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_UNBOT\", currentUser);\n        }\n        break\n      case \"following\":\n        console.log(\"handleUserChange: \" + eventName + \" | \" + event.currentTarget.checked)\n        if (event.currentTarget.checked){\n          socket.emit(\"TWITTER_FOLLOW\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_UNFOLLOW\", currentUser);\n        }\n        break\n      case \"catVerified\":\n        console.log(\"handleUserChange: \" + eventName + \" | \" + event.currentTarget.checked)\n        if (event.currentTarget.checked){\n          socket.emit(\"TWITTER_CATEGORY_VERIFIED\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_CATEGORY_UNVERIFIED\", currentUser);\n        }\n        break\n      case \"ignored\":\n        console.log(\"handleUserChange: \" + eventName + \" | \" + event.currentTarget.checked)\n        if (event.currentTarget.checked){\n          socket.emit(\"TWITTER_IGNORE\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_UNIGNORE\", currentUser);\n        }\n        break\n      default:\n        console.log(\"handleUserChange: UNKNOWN NAME: \" + eventName + \" | VALUE: \" + event.currentTarget.value)\n        console.log({event})\n    }\n  }\n  \n  // useLayoutEffect(() => {\n  useEffect(() => {\n    socket.on(\"SET_TWITTER_USER\", (results) => {\n      console.debug(\"RX SET_TWITTER_USER\");\n      console.debug(results);\n      handleAction({type: \"user\", data: results.node})\n      handleAction({type: \"stats\", data: results.stats})\n    });\n  }, [])\n\n  useEffect(() => {\n    socket.on(\"connect\", ()=>{\n      console.log(\"CONNECTED: \" + socket.id)\n      socket.emit(\"authentication\", {\n        namespace: \"view\",\n        userId: \"test\",\n        password: \"0123456789\",\n      });\n    })\n\n    socket.on(\"authenticated\", function () {\n      console.debug(\"AUTHENTICATED | \" + socket.id);\n\n      statsObj.socketId = socket.id;\n      statsObj.serverConnected = true;\n      statsObj.userReadyTransmitted = false;\n      statsObj.userReadyAck = false;\n\n      console.log(\"CONNECTED TO HOST | ID: \" + socket.id);\n      socket.emit(\"TWITTER_SEARCH_NODE\", \"@threecee\")\n    });\n\n    socket.on(\"action\", (action) => {\n      console.debug(\"RX ACTION | \" + socket.id + \" | TYPE: \" + action.type);\n      console.debug(\"RX ACTION | \", action.data);\n      handleAction(action)\n    });    \n  \n    return () => socket.disconnect();\n\n  }, []);\n\n  return (\n    <User user={currentUser} stats={status} handleUserChange={handleUserChange} handleSearchUser={handleSearchUser}/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}