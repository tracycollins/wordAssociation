{"version":3,"sources":["User.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","grid","display","gridItem","margin","card","raised","maxWidth","profileImage","height","bannerImage","table","tableRowGreen","backgroundColor","appBar","statusBar","menuButton","marginRight","spacing","title","search","position","borderRadius","shape","marginLeft","width","breakpoints","up","searchIcon","padding","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","buttonAll","buttonLeft","buttonNeutral","buttonRight","buttonMismatch","left","neutral","right","none","formatDate","dateInput","Date","toLocaleDateString","year","month","day","User","props","classes","createdAt","user","lastSeen","lastSeenDuration","Duration","toString","twitterAge","twitterAgeString","tweetRate","days","Math","ceil","statusesCount","useState","userSearch","setUserSearch","className","Container","component","AppBar","Toolbar","ButtonGroup","variant","size","aria-label","Button","onClick","handleUserChange","name","stats","uncategorized","all","mismatched","InputBase","placeholder","input","inputProps","value","onKeyPress","event","charCode","console","log","handleSearchUser","onChange","target","Grid","item","xs","Card","CardHeader","window","open","screenName","subheader","CardMedia","src","profileImageUrl","onError","e","bannerImageUrl","CardContent","Typography","description","dataSource","sourceType","options","TableContainer","Table","TableBody","TableRow","TableCell","align","location","followersCount","friendsCount","mentions","rate","toFixed","TableHead","manual","auto","FormGroup","category","getCategoryClass","categoryAuto","toUpperCase","FormControl","RadioGroup","FormControlLabel","labelPlacement","control","Radio","label","Checkbox","checked","categoryVerified","following","ignored","isBot","statsObj","socket","socketClient","twitterFeedPreviousUserArray","App","nodesPerMin","maxNodesPerMin","bestNetworkId","status","setStatus","nodeId","tweets","age","rateMax","tweetsPerDay","categoryVerfied","currentUser","setCurrentUser","previousUser","setPreviousUser","text","currentHashtag","setHashtag","useCallback","undefined","persist","preventDefault","eventName","currentTarget","eventValue","eventChecked","code","ctrlKey","searchFilter","emit","node","useEffect","on","results","debug","action","id","type","data","includes","push","namespace","userId","password","disconnect","socketId","serverConnected","userReadyTransmitted","userReadyAck","useHotkeys","searchString","searchTerm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a5309b6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Timeline } from 'react-twitter-widgets'\n\nimport Duration from 'duration';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Card from '@material-ui/core/Card';\n// import CardActionArea from '@material-ui/core/CardActionArea';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\n// import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\n// import FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\n// import IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\n// import MenuIcon from '@material-ui/icons/Menu';\n// import Paper from '@material-ui/core/Paper';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\n// import TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TableHead } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 2,\n  },\n  grid: {\n    display: 'flex',\n  },\n  gridItem: {\n    margin: 5,\n  },  \n  card: {\n    raised: false,\n    maxWidth: 300,\n  },\n  profileImage: {\n    height: 300,\n  },\n  bannerImage: {\n    height: 80,\n  },\n  table: {\n  },\n  tableRowGreen: {\n    backgroundColor: 'lightgreen',\n  },\n  appBar: {\n    backgroundColor: 'white',\n    margin: 2,\n  },\n  statusBar: {\n    backgroundColor: 'white',\n    margin: 2,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: \"white\",\n    '&:hover': {\n      backgroundColor: \"lightgray\",\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'primary',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n\n  buttonAll: {\n    color: 'black',\n  },\n  buttonLeft: {\n    color: 'blue',\n  },\n  buttonNeutral: {\n    color: 'gray',\n  },\n  buttonRight: {\n    color: 'red',\n  },\n  buttonMismatch: {\n    margin: 5\n  },\n\n  left: {\n    color: 'white',\n    backgroundColor: 'blue',\n  },\n  neutral: {\n    color: 'white',\n    backgroundColor: 'gray',\n  },\n  right: {\n    color: 'white',\n    backgroundColor: 'red',\n  },\n  none: {\n    color: 'black',\n    backgroundColor: 'white',\n  },\n\n}));\n\nconst formatDate = (dateInput) => {\n  return new Date(dateInput).toLocaleDateString(\n    'en-gb',\n    {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }\n  );\n}\n\nconst defaultProfileImage = \"logo192.png\"\nconst defaultBannerImage = \"logo192.png\"\n\nconst User = (props) => {\n\n  const classes = useStyles();\n\n  const createdAt = formatDate(props.user.createdAt)\n  const lastSeen = formatDate(props.user.lastSeen)\n \n  const lastSeenDuration = new Duration(new Date(props.user.lastSeen)).toString(1, 4)\n  const twitterAge = props.user.createdAt ? new Duration(new Date(props.user.createdAt)) : new Duration(new Date())\n  const twitterAgeString = twitterAge.toString(1, 4)\n\n  const tweetRate = twitterAge.days > 0 ? Math.ceil(props.user.statusesCount/twitterAge.days) : 0;\n\n  const [userSearch, setUserSearch] = useState(\"\");\n\n  const handleChangeSearch = (event) => {\n    console.log(\"handleChangeSearch: \" + event.target.value)\n    setUserSearch(event.target.value);\n  }\n\n  const handleKeyPress = (event) => {\n    if (event.charCode === 13) { // enter key pressed\n      console.log(\"ENTER\")\n      props.handleSearchUser(userSearch)\n    }\n  }\n\n  const openUserTwitterPage = () => {\n    console.log(\"open twitter\")\n    window.open(`http://twitter.com/${props.user.screenName || null}`, \"_blank\") //to open new page\n  }\n\n  const getCategoryClass = (category) => {\n    switch (category){\n      case \"left\":\n      case \"neutral\":\n      case \"right\":\n        return classes[category]\n      default:\n        return classes.none\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Container component=\"main\" maxWidth={false}>\n        <AppBar  className={classes.appBar} position=\"static\">\n          <Toolbar>\n            <ButtonGroup variant=\"contained\" color=\"primary\" size=\"small\" aria-label=\"small button group\">\n              <Button onClick={props.handleUserChange} name=\"all\" >TOTAL: {props.stats.user.uncategorized.all}</Button>\n              <Button onClick={props.handleUserChange} name=\"left\" >LEFT: {props.stats.user.uncategorized.left}</Button>\n              <Button onClick={props.handleUserChange} name=\"neutral\" >NEUTRAL: {props.stats.user.uncategorized.neutral}</Button>\n              <Button onClick={props.handleUserChange} name=\"right\" >RIGHT: {props.stats.user.uncategorized.right}</Button>\n          </ButtonGroup>\n            <Button \n              variant=\"contained\" color=\"primary\" size=\"small\" onClick={props.handleUserChange} name=\"mismatch\" className={classes.buttonMismatch}>MISMATCH {props.stats.user.mismatched}\n            </Button>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon color=\"primary\"/>\n              </div>\n              <InputBase\n                placeholder=\"search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n                value={userSearch}\n                onKeyPress={handleKeyPress}\n                onChange={handleChangeSearch}\n              />\n            </div>\n          </Toolbar>\n        </AppBar>\n        <Grid className={classes.grid}>\n          <Grid item className={classes.gridItem} xs={3}>\n            <Card className={classes.card} variant=\"outlined\">\n              <CardHeader\n                onClick={openUserTwitterPage}\n                title={`${props.user.name}`}\n                subheader={`@${props.user.screenName}`}\n              >\n              </CardHeader>\n              <CardMedia\n                className={classes.profileImage}\n                // image={props.user.profileImageUrl}\n                src={props.user.profileImageUrl || defaultProfileImage}\n                component=\"img\"\n                onError={e => {\n                }}              \n              />\n              <br></br>\n              <CardMedia \n                className={classes.bannerImage} \n                // image={props.user.bannerImageUrl || defaultBannerImage}\n                src={props.user.bannerImageUrl || defaultBannerImage} \n                component=\"img\"\n                onError={e => {\n                }}              \n              />\n              <CardContent>\n                <Typography>\n                  {props.user.description}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item className={classes.gridItem} xs={3}>\n            <Timeline\n              dataSource={{\n                sourceType: 'profile',\n                screenName: props.user.screenName\n              }}\n              options={{\n                height: '540'\n              }}\n            />\n          </Grid>\n          <Grid item className={classes.gridItem} xs={3}>\n            <TableContainer>\n              <Table className={classes.table} size=\"small\">\n                <TableBody>\n                  <TableRow>\n                    <TableCell>location</TableCell><TableCell align=\"right\">{props.user.location}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>created</TableCell><TableCell align=\"right\">{createdAt}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>twitter age</TableCell><TableCell align=\"right\">{twitterAgeString}</TableCell>\n                  </TableRow>\n                  <TableRow className={props.user.followersCount > 5000 ? classes.tableRowGreen : null}>\n                    <TableCell>followers</TableCell><TableCell align=\"right\">{props.user.followersCount}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>friends</TableCell><TableCell align=\"right\">{props.user.friendsCount}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>tweets</TableCell><TableCell align=\"right\">{props.user.statusesCount}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>tweets/day</TableCell><TableCell align=\"right\">{tweetRate}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>last seen</TableCell><TableCell align=\"right\">{lastSeen}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>last seen</TableCell><TableCell align=\"right\">{lastSeenDuration} ago</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>mentions</TableCell><TableCell align=\"right\">{props.user.mentions}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>mentions/min</TableCell><TableCell align=\"right\">{props.user.rate ? props.user.rate.toFixed(1) : 0}</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item className={classes.gridItem} xs={2}>\n            <TableContainer>\n              <Table className={classes.table} size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>CAT</TableCell>\n                    <TableCell align=\"left\">MAN</TableCell>\n                    <TableCell align=\"left\">AUTO</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>left</TableCell>\n                    <TableCell align=\"right\">{props.stats.user.manual.left}</TableCell>\n                    <TableCell align=\"right\">{props.stats.user.auto.left}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>neutral</TableCell>\n                    <TableCell align=\"right\">{props.stats.user.manual.neutral}</TableCell>\n                    <TableCell align=\"right\">{props.stats.user.auto.neutral}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>right</TableCell>\n                    <TableCell align=\"right\">{props.stats.user.manual.right}</TableCell>\n                    <TableCell align=\"right\">{props.stats.user.auto.right}</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item className={classes.gridItem} xs={1}>\n            <FormGroup>\n              <Button className={getCategoryClass(props.user.categoryAuto)}>\n                AUTO: {props.user.categoryAuto.toUpperCase() || \"NONE\"}\n              </Button>\n\n              <FormControl component=\"fieldset\">\n                <RadioGroup aria-label=\"category\" name=\"category\" value={props.user.category || \"none\"} onChange={props.handleUserChange}>\n                  <FormControlLabel labelPlacement=\"start\" value=\"left\" control={<Radio />} label=\"left\"/>\n                  <FormControlLabel labelPlacement=\"start\" value=\"neutral\" control={<Radio />} label=\"neutral\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"right\" control={<Radio />} label=\"right\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"positive\" control={<Radio />} label=\"positive\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"negative\" control={<Radio />} label=\"negative\" />\n                  <FormControlLabel labelPlacement=\"start\" value=\"none\" control={<Radio />} label=\"none\" />\n                </RadioGroup>\n              </FormControl>\n\n              <FormControlLabel\n                control={<Checkbox checked={props.user.categoryVerified || false} onChange={props.handleUserChange} name=\"catVerified\" />}\n                label=\"verified\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={props.user.following || false} onChange={props.handleUserChange} name=\"following\" />}\n                label=\"following\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={props.user.ignored || false} onChange={props.handleUserChange} name=\"ignored\" />}\n                label=\"ignored\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={props.user.isBot || false} onChange={props.handleUserChange} name=\"isBot\" />}\n                label=\"bot\"\n                labelPlacement=\"start\"\n              />\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default User;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport socketClient from \"socket.io-client\";\nimport './App.css';\nimport User from './User.js';\n\n// const ENDPOINT = \"http://mbp3:9997/view\";\nconst ENDPOINT = \"https://word.threeceelabs.com/view\";\n\nconst statsObj = {};\nstatsObj.viewerReadyTransmitted = false;\n\nconst socket = socketClient(ENDPOINT);\nconst twitterFeedPreviousUserArray = [];\n\n\nconst App = () => {\n\n  const defaultStatus = {\n    nodesPerMin: 0, \n    maxNodesPerMin: 0,\n    bestNetworkId: \"\",\n    user: {\n      uncategorized: {\n        left: 0,\n        neutral: 0,\n        right: 0,\n        all: 0,\n        mismatched: 0\n      },\n      manual: {\n        left: 0,\n        neutral: 0,\n        right: 0,\n      },\n      auto: {\n        left: 0,\n        neutral: 0,\n        right: 0,\n      }\n    }\n  }\n\n  const defaultUser = {\n\n    nodeId: null, \n    screenName: \"threecee\",\n    name: \"\",\n    location: \"\",\n    description: \"\",\n    profileImageUrl: \"https://pbs.twimg.com/profile_images/1205585278565527559/GrTkBpzl.jpg\",\n    bannerImage: \"\",\n    createdAt: null,\n    followersCount: 0,\n    friendsCount: 0,\n    tweets: 0,\n\n    age: 0,\n    mentions: 0,\n    rate: 0,\n    rateMax: 0,\n    tweetsPerDay: 0,\n\n    lastSeen: null,\n    isBot: false,\n    following: false,\n    categoryVerfied: false,\n    category: \"none\",\n    categoryAuto: \"none\",\n  }\n\n  const defaultHashtag = {\n    nodeId: null,\n    text: null,\n    categoryAuto: \"none\",\n    category: \"none\",\n    \n    lastSeen: null,\n    age: 0,\n    mentions: 0,\n    rate: 0,\n    rateMax: 0,\n  }\n\n  const [status, setStatus] = useState(defaultStatus);\n  const [currentUser, setCurrentUser] = useState(defaultUser);\n  const [previousUser, setPreviousUser] = useState({nodeId: false});\n  const [currentHashtag, setHashtag] = useState(defaultHashtag);\n  \n  const handleSearchUser = (searchString) => {\n    const searchTerm = \"@\" + searchString\n    socket.emit(\"TWITTER_SEARCH_NODE\", searchTerm)\n  }\n\n  const handleUserChange = useCallback((event) => {\n\n    // console.log(\"handleUserChange | currentUser: @\" + currentUser.screenName)\n\n    if (event.persist !== undefined) { \n      event.persist() \n    }\n\n    if (event.preventDefault !== undefined) { \n      event.preventDefault() \n    }\n\n    let eventName = event.currentTarget.name;\n    let eventValue = event.currentTarget.value;\n    let eventChecked = event.currentTarget.checked;\n\n    if (event.currentTarget.name === undefined && event.code){\n      switch (event.code){\n        case \"ArrowRight\":\n          eventName = \"all\"\n          break;\n        case \"ArrowLeft\":\n          eventName = \"all\"\n          break;\n        case \"KeyL\":\n          if (event.ctrlKey){\n            eventName = \"category\"\n            eventValue = \"left\"\n          }\n          else{\n            eventName = \"left\"\n          }\n          break;\n        case \"KeyN\":\n          if (event.ctrlKey){\n            eventName = \"category\"\n            eventValue = \"neutral\"\n          }\n          else{\n            eventName = \"neutral\"\n          }\n          break;\n        case \"KeyR\":\n          if (event.ctrlKey){\n            eventName = \"category\"\n            eventValue = \"right\"\n          }\n          else{\n            eventName = \"right\"\n          }\n          break;\n        case \"KeyI\":\n          if (event.ctrlKey){\n            eventName = \"ignored\"\n            eventChecked = !currentUser.ignored\n          }\n          break;\n        case \"KeyV\":\n          if (event.ctrlKey){\n            eventName = \"catVerified\"\n            eventChecked = !currentUser.categoryVerified\n          }\n          break;\n        case \"KeyB\":\n          if (event.ctrlKey){\n            eventName = \"isBot\"\n            eventChecked = !currentUser.isBot\n          }\n          break;\n        default:\n      }\n    }\n\n    console.log(\"handleUserChange | @\" + currentUser.screenName + \" | name: \" + eventName + \" | value: \" + eventValue)\n\n    let searchFilter = \"@?\";\n\n    switch (eventName){\n      case \"all\":\n      case \"left\":\n      case \"neutral\":\n      case \"right\":\n        searchFilter += eventName\n        socket.emit(\"TWITTER_SEARCH_NODE\", searchFilter);\n        break\n      case \"mismatch\":\n        socket.emit(\"TWITTER_SEARCH_NODE\", \"@?mm\");\n        break\n      case \"category\":\n        socket.emit(\"TWITTER_CATEGORIZE_NODE\", {\n          category: eventValue,\n          following: true,\n          node: currentUser,\n        });\n        break\n      case \"isBot\":\n        if (eventChecked){\n          socket.emit(\"TWITTER_BOT\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_UNBOT\", currentUser);\n        }\n        break\n      case \"following\":\n        if (eventChecked){\n          socket.emit(\"TWITTER_FOLLOW\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_UNFOLLOW\", currentUser);\n        }\n        break\n      case \"catVerified\":\n        if (eventChecked){\n          socket.emit(\"TWITTER_CATEGORY_VERIFIED\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_CATEGORY_UNVERIFIED\", currentUser);\n        }\n        break\n      case \"ignored\":\n        if (eventChecked){\n          socket.emit(\"TWITTER_IGNORE\", currentUser);\n        }\n        else{\n          socket.emit(\"TWITTER_UNIGNORE\", currentUser);\n        }\n        break\n      default:\n        console.log(\"handleUserChange: UNKNOWN NAME: \" + eventName + \" | VALUE: \" + eventValue)\n        console.log({event})\n    }\n    \n  }, [currentUser])\n  \n  useEffect(() => {\n    socket.on(\"SET_TWITTER_USER\", (results) => {\n      console.debug(\"RX SET_TWITTER_USER\");\n      console.debug(results);\n      setCurrentUser(results.node)\n      setStatus(results.stats)\n    });\n  }, [])\n\n  useEffect(() => {\n    socket.on(\"action\", (action) => {\n      console.debug(\"RX ACTION | \" + socket.id + \" | TYPE: \" + action.type);\n      console.debug(\"RX ACTION | \", action.data);\n\n      switch (action.type){\n        case \"user\":\n            setCurrentUser(action.data)\n\n            if (previousUser.nodeId \n              && (currentUser.nodeId !== previousUser.nodeId) \n              && !twitterFeedPreviousUserArray.includes(previousUser.nodeId)\n            ){\n              twitterFeedPreviousUserArray.push(previousUser.nodeId);\n            }\n            if (previousUser.nodeId !== currentUser.nodeId){\n              setPreviousUser(currentUser);\n            }\n\n            console.log(\"USER: @\" + action.data.screenName + \" | \" + action.data.profileImageUrl)\n          break\n        case \"hashtag\":\n            setHashtag({})\n            console.log(\"HT: #\" + currentHashtag.text)\n          break\n        case \"stats\":\n            setStatus(action.data)\n          break\n          default:\n      }\n\n    });   \n     \n  }, [])\n\n  useEffect(() => {\n    socket.on(\"connect\", ()=>{\n      console.log(\"CONNECTED: \" + socket.id)\n      socket.emit(\"authentication\", {\n        namespace: \"view\",\n        userId: \"test\",\n        password: \"0123456789\",\n      });\n    })\n    return () => socket.disconnect();\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"authenticated\", function () {\n      console.debug(\"AUTHENTICATED | \" + socket.id);\n\n      statsObj.socketId = socket.id;\n      statsObj.serverConnected = true;\n      statsObj.userReadyTransmitted = false;\n      statsObj.userReadyAck = false;\n      socket.emit(\"TWITTER_SEARCH_NODE\", \"@threecee\")\n    });\n  }, []);\n\n  useHotkeys('right', handleUserChange) // next uncat any\n  useHotkeys('left', handleUserChange) // prev uncat any\n\n  useHotkeys('L', handleUserChange)\n  useHotkeys('ctrl+L', (event) => handleUserChange(event), {}, [currentUser])\n\n  useHotkeys('R', handleUserChange)\n  useHotkeys('ctrl+R', (event) => handleUserChange(event), {}, [currentUser])\n\n  useHotkeys('N', handleUserChange)\n  useHotkeys('ctrl+N', (event) => handleUserChange(event), {}, [currentUser])\n\n  useHotkeys('ctrl+I', (event) => handleUserChange(event), {}, [currentUser])\n  useHotkeys('ctrl+B', (event) => handleUserChange(event), {}, [currentUser])\n  useHotkeys('ctrl+V', (event) => handleUserChange(event), {}, [currentUser])\n\n  return (\n    <User user={currentUser} stats={status} handleUserChange={handleUserChange} handleSearchUser={handleSearchUser}/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}